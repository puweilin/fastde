// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "fastde_types.hpp"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rttest_dgCMatrix
Rcpp::dgCMatrix rttest_dgCMatrix(Rcpp::dgCMatrix const& mat);
RcppExport SEXP _fastde_rttest_dgCMatrix(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::dgCMatrix const& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(rttest_dgCMatrix(mat));
    return rcpp_result_gen;
END_RCPP
}
// rttest_dgCMatrix64
Rcpp::dgCMatrix64 rttest_dgCMatrix64(Rcpp::dgCMatrix64 const& mat);
RcppExport SEXP _fastde_rttest_dgCMatrix64(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::dgCMatrix64 const& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(rttest_dgCMatrix64(mat));
    return rcpp_result_gen;
END_RCPP
}
// ComputeFoldChange
extern SEXP ComputeFoldChange(Rcpp::NumericMatrix const& matrix, Rcpp::IntegerVector const& labels, bool calc_percents, std::string fc_name, bool use_expm1, double min_threshold, bool use_log, double log_base, bool use_pseudocount, bool as_dataframe, int threads);
RcppExport SEXP _fastde_ComputeFoldChange(SEXP matrixSEXP, SEXP labelsSEXP, SEXP calc_percentsSEXP, SEXP fc_nameSEXP, SEXP use_expm1SEXP, SEXP min_thresholdSEXP, SEXP use_logSEXP, SEXP log_baseSEXP, SEXP use_pseudocountSEXP, SEXP as_dataframeSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix const& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector const& >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_percents(calc_percentsSEXP);
    Rcpp::traits::input_parameter< std::string >::type fc_name(fc_nameSEXP);
    Rcpp::traits::input_parameter< bool >::type use_expm1(use_expm1SEXP);
    Rcpp::traits::input_parameter< double >::type min_threshold(min_thresholdSEXP);
    Rcpp::traits::input_parameter< bool >::type use_log(use_logSEXP);
    Rcpp::traits::input_parameter< double >::type log_base(log_baseSEXP);
    Rcpp::traits::input_parameter< bool >::type use_pseudocount(use_pseudocountSEXP);
    Rcpp::traits::input_parameter< bool >::type as_dataframe(as_dataframeSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeFoldChange(matrix, labels, calc_percents, fc_name, use_expm1, min_threshold, use_log, log_base, use_pseudocount, as_dataframe, threads));
    return rcpp_result_gen;
END_RCPP
}
// ComputeFoldChangeSparse
extern SEXP ComputeFoldChangeSparse(Rcpp::dgCMatrix const& matrix, Rcpp::IntegerVector const& labels, bool calc_percents, std::string fc_name, bool use_expm1, double min_threshold, bool use_log, double log_base, bool use_pseudocount, bool as_dataframe, int threads);
RcppExport SEXP _fastde_ComputeFoldChangeSparse(SEXP matrixSEXP, SEXP labelsSEXP, SEXP calc_percentsSEXP, SEXP fc_nameSEXP, SEXP use_expm1SEXP, SEXP min_thresholdSEXP, SEXP use_logSEXP, SEXP log_baseSEXP, SEXP use_pseudocountSEXP, SEXP as_dataframeSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::dgCMatrix const& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector const& >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_percents(calc_percentsSEXP);
    Rcpp::traits::input_parameter< std::string >::type fc_name(fc_nameSEXP);
    Rcpp::traits::input_parameter< bool >::type use_expm1(use_expm1SEXP);
    Rcpp::traits::input_parameter< double >::type min_threshold(min_thresholdSEXP);
    Rcpp::traits::input_parameter< bool >::type use_log(use_logSEXP);
    Rcpp::traits::input_parameter< double >::type log_base(log_baseSEXP);
    Rcpp::traits::input_parameter< bool >::type use_pseudocount(use_pseudocountSEXP);
    Rcpp::traits::input_parameter< bool >::type as_dataframe(as_dataframeSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeFoldChangeSparse(matrix, labels, calc_percents, fc_name, use_expm1, min_threshold, use_log, log_base, use_pseudocount, as_dataframe, threads));
    return rcpp_result_gen;
END_RCPP
}
// ComputeFoldChangeSparse64
extern SEXP ComputeFoldChangeSparse64(Rcpp::dgCMatrix64 const& matrix, Rcpp::IntegerVector const& labels, bool calc_percents, std::string fc_name, bool use_expm1, double min_threshold, bool use_log, double log_base, bool use_pseudocount, bool as_dataframe, int threads);
RcppExport SEXP _fastde_ComputeFoldChangeSparse64(SEXP matrixSEXP, SEXP labelsSEXP, SEXP calc_percentsSEXP, SEXP fc_nameSEXP, SEXP use_expm1SEXP, SEXP min_thresholdSEXP, SEXP use_logSEXP, SEXP log_baseSEXP, SEXP use_pseudocountSEXP, SEXP as_dataframeSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::dgCMatrix64 const& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector const& >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< bool >::type calc_percents(calc_percentsSEXP);
    Rcpp::traits::input_parameter< std::string >::type fc_name(fc_nameSEXP);
    Rcpp::traits::input_parameter< bool >::type use_expm1(use_expm1SEXP);
    Rcpp::traits::input_parameter< double >::type min_threshold(min_thresholdSEXP);
    Rcpp::traits::input_parameter< bool >::type use_log(use_logSEXP);
    Rcpp::traits::input_parameter< double >::type log_base(log_baseSEXP);
    Rcpp::traits::input_parameter< bool >::type use_pseudocount(use_pseudocountSEXP);
    Rcpp::traits::input_parameter< bool >::type as_dataframe(as_dataframeSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeFoldChangeSparse64(matrix, labels, calc_percents, fc_name, use_expm1, min_threshold, use_log, log_base, use_pseudocount, as_dataframe, threads));
    return rcpp_result_gen;
END_RCPP
}
// FilterFoldChange
extern SEXP FilterFoldChange(SEXP fc, SEXP pct1, SEXP pct2, SEXP init_mask, double min_pct, double min_diff_pct, double logfc_threshold, bool only_pos, bool not_count, int threads);
RcppExport SEXP _fastde_FilterFoldChange(SEXP fcSEXP, SEXP pct1SEXP, SEXP pct2SEXP, SEXP init_maskSEXP, SEXP min_pctSEXP, SEXP min_diff_pctSEXP, SEXP logfc_thresholdSEXP, SEXP only_posSEXP, SEXP not_countSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fc(fcSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pct1(pct1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type pct2(pct2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type init_mask(init_maskSEXP);
    Rcpp::traits::input_parameter< double >::type min_pct(min_pctSEXP);
    Rcpp::traits::input_parameter< double >::type min_diff_pct(min_diff_pctSEXP);
    Rcpp::traits::input_parameter< double >::type logfc_threshold(logfc_thresholdSEXP);
    Rcpp::traits::input_parameter< bool >::type only_pos(only_posSEXP);
    Rcpp::traits::input_parameter< bool >::type not_count(not_countSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(FilterFoldChange(fc, pct1, pct2, init_mask, min_pct, min_diff_pct, logfc_threshold, only_pos, not_count, threads));
    return rcpp_result_gen;
END_RCPP
}
// rc_sp_transpose
extern Rcpp::S4 rc_sp_transpose(Rcpp::S4 const& sp_matrix);
RcppExport SEXP _fastde_rc_sp_transpose(SEXP sp_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 const& >::type sp_matrix(sp_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(rc_sp_transpose(sp_matrix));
    return rcpp_result_gen;
END_RCPP
}
// rc_sp64_transpose
extern Rcpp::S4 rc_sp64_transpose(Rcpp::S4 const& obj);
RcppExport SEXP _fastde_rc_sp64_transpose(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 const& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(rc_sp64_transpose(obj));
    return rcpp_result_gen;
END_RCPP
}
// rc_sp_to_dense
extern SEXP rc_sp_to_dense(S4 const& obj);
RcppExport SEXP _fastde_rc_sp_to_dense(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 const& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(rc_sp_to_dense(obj));
    return rcpp_result_gen;
END_RCPP
}
// rc_sp64_to_dense
extern SEXP rc_sp64_to_dense(S4 const& obj);
RcppExport SEXP _fastde_rc_sp64_to_dense(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 const& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(rc_sp64_to_dense(obj));
    return rcpp_result_gen;
END_RCPP
}
// rc_sp_to_dense_transposed
extern SEXP rc_sp_to_dense_transposed(S4 const& obj);
RcppExport SEXP _fastde_rc_sp_to_dense_transposed(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 const& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(rc_sp_to_dense_transposed(obj));
    return rcpp_result_gen;
END_RCPP
}
// rc_sp64_to_dense_transposed
extern SEXP rc_sp64_to_dense_transposed(S4 const& obj);
RcppExport SEXP _fastde_rc_sp64_to_dense_transposed(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 const& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(rc_sp64_to_dense_transposed(obj));
    return rcpp_result_gen;
END_RCPP
}
// ttest_fast
extern SEXP ttest_fast(Rcpp::NumericMatrix const& matrix, Rcpp::IntegerVector const& labels, int alternative, bool var_equal, bool as_dataframe, int threads);
RcppExport SEXP _fastde_ttest_fast(SEXP matrixSEXP, SEXP labelsSEXP, SEXP alternativeSEXP, SEXP var_equalSEXP, SEXP as_dataframeSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix const& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector const& >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< int >::type alternative(alternativeSEXP);
    Rcpp::traits::input_parameter< bool >::type var_equal(var_equalSEXP);
    Rcpp::traits::input_parameter< bool >::type as_dataframe(as_dataframeSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ttest_fast(matrix, labels, alternative, var_equal, as_dataframe, threads));
    return rcpp_result_gen;
END_RCPP
}
// sparse_ttest_fast
extern SEXP sparse_ttest_fast(Rcpp::dgCMatrix const& matrix, Rcpp::IntegerVector const& labels, int alternative, bool var_equal, bool as_dataframe, int threads);
RcppExport SEXP _fastde_sparse_ttest_fast(SEXP matrixSEXP, SEXP labelsSEXP, SEXP alternativeSEXP, SEXP var_equalSEXP, SEXP as_dataframeSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::dgCMatrix const& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector const& >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< int >::type alternative(alternativeSEXP);
    Rcpp::traits::input_parameter< bool >::type var_equal(var_equalSEXP);
    Rcpp::traits::input_parameter< bool >::type as_dataframe(as_dataframeSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_ttest_fast(matrix, labels, alternative, var_equal, as_dataframe, threads));
    return rcpp_result_gen;
END_RCPP
}
// sparse64_ttest_fast
extern SEXP sparse64_ttest_fast(Rcpp::dgCMatrix64 const& matrix, Rcpp::IntegerVector const& labels, int alternative, bool var_equal, bool as_dataframe, int threads);
RcppExport SEXP _fastde_sparse64_ttest_fast(SEXP matrixSEXP, SEXP labelsSEXP, SEXP alternativeSEXP, SEXP var_equalSEXP, SEXP as_dataframeSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::dgCMatrix64 const& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector const& >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< int >::type alternative(alternativeSEXP);
    Rcpp::traits::input_parameter< bool >::type var_equal(var_equalSEXP);
    Rcpp::traits::input_parameter< bool >::type as_dataframe(as_dataframeSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse64_ttest_fast(matrix, labels, alternative, var_equal, as_dataframe, threads));
    return rcpp_result_gen;
END_RCPP
}
// wmw_fast
extern SEXP wmw_fast(Rcpp::NumericMatrix const& matrix, Rcpp::IntegerVector const& labels, int rtype, bool continuity_correction, bool as_dataframe, int threads);
RcppExport SEXP _fastde_wmw_fast(SEXP matrixSEXP, SEXP labelsSEXP, SEXP rtypeSEXP, SEXP continuity_correctionSEXP, SEXP as_dataframeSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix const& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector const& >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< int >::type rtype(rtypeSEXP);
    Rcpp::traits::input_parameter< bool >::type continuity_correction(continuity_correctionSEXP);
    Rcpp::traits::input_parameter< bool >::type as_dataframe(as_dataframeSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(wmw_fast(matrix, labels, rtype, continuity_correction, as_dataframe, threads));
    return rcpp_result_gen;
END_RCPP
}
// sparse_wmw_fast
extern SEXP sparse_wmw_fast(Rcpp::dgCMatrix const& matrix, Rcpp::IntegerVector const& labels, int rtype, bool continuity_correction, bool as_dataframe, int threads);
RcppExport SEXP _fastde_sparse_wmw_fast(SEXP matrixSEXP, SEXP labelsSEXP, SEXP rtypeSEXP, SEXP continuity_correctionSEXP, SEXP as_dataframeSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::dgCMatrix const& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector const& >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< int >::type rtype(rtypeSEXP);
    Rcpp::traits::input_parameter< bool >::type continuity_correction(continuity_correctionSEXP);
    Rcpp::traits::input_parameter< bool >::type as_dataframe(as_dataframeSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_wmw_fast(matrix, labels, rtype, continuity_correction, as_dataframe, threads));
    return rcpp_result_gen;
END_RCPP
}
// sparse64_wmw_fast
extern SEXP sparse64_wmw_fast(Rcpp::dgCMatrix64 const& matrix, Rcpp::IntegerVector const& labels, int rtype, bool continuity_correction, bool as_dataframe, int threads);
RcppExport SEXP _fastde_sparse64_wmw_fast(SEXP matrixSEXP, SEXP labelsSEXP, SEXP rtypeSEXP, SEXP continuity_correctionSEXP, SEXP as_dataframeSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::dgCMatrix64 const& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector const& >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< int >::type rtype(rtypeSEXP);
    Rcpp::traits::input_parameter< bool >::type continuity_correction(continuity_correctionSEXP);
    Rcpp::traits::input_parameter< bool >::type as_dataframe(as_dataframeSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse64_wmw_fast(matrix, labels, rtype, continuity_correction, as_dataframe, threads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fastde_rttest_dgCMatrix", (DL_FUNC) &_fastde_rttest_dgCMatrix, 1},
    {"_fastde_rttest_dgCMatrix64", (DL_FUNC) &_fastde_rttest_dgCMatrix64, 1},
    {"_fastde_ComputeFoldChange", (DL_FUNC) &_fastde_ComputeFoldChange, 11},
    {"_fastde_ComputeFoldChangeSparse", (DL_FUNC) &_fastde_ComputeFoldChangeSparse, 11},
    {"_fastde_ComputeFoldChangeSparse64", (DL_FUNC) &_fastde_ComputeFoldChangeSparse64, 11},
    {"_fastde_FilterFoldChange", (DL_FUNC) &_fastde_FilterFoldChange, 10},
    {"_fastde_rc_sp_transpose", (DL_FUNC) &_fastde_rc_sp_transpose, 1},
    {"_fastde_rc_sp64_transpose", (DL_FUNC) &_fastde_rc_sp64_transpose, 1},
    {"_fastde_rc_sp_to_dense", (DL_FUNC) &_fastde_rc_sp_to_dense, 1},
    {"_fastde_rc_sp64_to_dense", (DL_FUNC) &_fastde_rc_sp64_to_dense, 1},
    {"_fastde_rc_sp_to_dense_transposed", (DL_FUNC) &_fastde_rc_sp_to_dense_transposed, 1},
    {"_fastde_rc_sp64_to_dense_transposed", (DL_FUNC) &_fastde_rc_sp64_to_dense_transposed, 1},
    {"_fastde_ttest_fast", (DL_FUNC) &_fastde_ttest_fast, 6},
    {"_fastde_sparse_ttest_fast", (DL_FUNC) &_fastde_sparse_ttest_fast, 6},
    {"_fastde_sparse64_ttest_fast", (DL_FUNC) &_fastde_sparse64_ttest_fast, 6},
    {"_fastde_wmw_fast", (DL_FUNC) &_fastde_wmw_fast, 6},
    {"_fastde_sparse_wmw_fast", (DL_FUNC) &_fastde_sparse_wmw_fast, 6},
    {"_fastde_sparse64_wmw_fast", (DL_FUNC) &_fastde_sparse64_wmw_fast, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_fastde(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
